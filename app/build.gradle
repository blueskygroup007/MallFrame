
/*todo:各项含义
        搜索:史上最全Android build.gradle配置详解*/

/*todo gradle知识点综述:
   Gradle还默认为我们提供了dependencies、projects和properties等Task。
   dependencies用于显示Project的依赖信息，projects用于显示所有Project，包括根Project和子Project，
   而properties则用于显示一个Project所包含的所有Property

   todo:在默认Property中，allprojects表示所有的Project，这里只包含一个根Project，在多项目构建中，它将包含多个Project；buildDir表示构建结果的输出目录；
    我们自己定义的helloWorld和copyFile也成为了Project中的Property。
    另外，Project还包括用于执行Ant命令的DefaultAntBuilder（Property名为ant）和Project的描述属性description。

   todo:总结:
        1.task就等于方法:apply、dependencies、task等实际上是Project的方法,是gradle自带的,或者android定义的。
        2.Property就等于属性:name---project的名称，description---项目描述，version---项目版本信息.
   */



/*todo gradle知识点:这句其实是Groovy语法糖，像Ruby和Js都有这种语法糖，apply实际上是个方法，补上括号后的脚本
   ：apply (plugin: 'com.android.application'),看起来还是有点别扭是不？还有个语法糖，如果方法参数是个map类型，那么方括号可以省略
   ，进一步还原apply([ plugin: 'com.android.application']),不理解的可以去看下Groovy的map的写法，和js一样。
   所以这行的意思是：apply其实是个方法，接收一个Map类型的参数。*/
apply plugin: 'com.android.application'


/* gradle知识点:Project:是Gradle最重要的一个领域对象，我们写的build.gradle脚本的全部作用，其实就是配置一个Project实例。
在build.gradle脚本里，我们可以隐式的操纵Project实例，比如，apply插件、声明依赖、定义Task等，
如上面build.gradle所示。todo apply、dependencies、task等实际上是Project的方法，参数是一个代码块。
如果需要，也可以显示的操纵Project实例，比如：project.ext.myProp = 'myValue'*/





android {
    compileSdkVersion 28
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId "com.bluesky.mallframe"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    /*viewBinding.enabled = true*/

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


/*gradle知识点:dependencies 这其实是个方法调用。调用了Project的dependencies方法。只不过参数是个闭包*/
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation("com.google.guava:guava:29.0-android")
    /*V4依赖.加入该依赖,则bmob不再报错*/
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation files('libs\\HeWeather_Plugin_SDK_Android_V1.4.jar')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.blankj:utilcodex:1.28.0'
    /*Bmob*/

    implementation 'cn.bmob.android:bmob-sdk:3.7.7'
    implementation "io.reactivex.rxjava2:rxjava:2.2.2"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'com.squareup.okio:okio:2.1.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    /*MaterialValues库*/
    implementation 'blue.aodev:material-values:1.1.1'
    /*日期转轮*/
    implementation 'com.github.zyyoona7:pickerview:1.0.9'
    implementation 'com.github.zyyoona7:wheelview:1.0.7'

    /* 添加material库以支持RecyclerView,TabLayout，Snackbar，FloatingActionButton，BottomNavigationView*/
    implementation 'com.google.android.material:material:1.2.0-alpha05'
//    implementation 'org.jetbrains:annotations:15.0'

    implementation 'com.haibin:calendarview:3.6.9'
    implementation 'joda-time:joda-time:2.10.6'




}
